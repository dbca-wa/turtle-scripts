Thevenard as long-term index nesting site
========================================================
author: "Turtle Conservation Program, Dept Parks & Wildlife WA"
date: "`r format(Sys.time(), '%d %B, %Y')`"
autosize: true

```{r r setup, include=FALSE, message=FALSE, warning=FALSE}
knitr::opts_chunk$set(echo = TRUE)
setwd("~/projects/turtle-scripts/wastd")
if (file.exists("../config/setup.R")) source("../config/setup.R")
if (file.exists("../config/load.R")) source("../config/load.R")
```

```{r api}
track_records <- wastd_api("turtle-nest-encounters")
tag_records <- wastd_api("animal-encounters")
nest_json <- wastd_api("turtle-nest-encounters",
                             query=list(taxon="Cheloniidae",
                                        limit=10000,
                                        format="json",
                                        nest_type="hatched-nest"),
                            simplify=FALSE)
# listviewer::jsonedit(nest_json$content)
# area_json <- wastd_api("areas", simplify=FALSE)
grd <- readOGR("thv_grid.geojson", "OGRGeoJSON")
tagging_area <- readOGR("thv_tagging.geojson", "OGRGeoJSON")
```


```{r data_munging}
#' Return a UTC HTTP date as GMT+08
utc_as_gmt08 <- . %>%
  parse_date_time(orders = c("YmdHMSz", "adbYHMS")) %>%
  with_tz(tzone="Australia/Perth")

#' Calculate the "turtle date" from a given datetime
as_turtle_date <- . %>% utc_as_gmt08 %>% -hours(12) %>% as_date

#' Convert between url-safe dash-separated-names and Human Readable Title Case
humanize <- . %>% stringr::str_to_title() %>% stringr::str_replace("-", " ")
urlize <- . %>% stringr::str_to_lower() %>% stringr::str_replace(" ", "-")

#' Filter a data.frame to records collected at THV after 19 Dec 2016
#' TODO replace with filtering for THV 2016/2017 field trips at API
thv_filter <- . %>% filter(
    latitude < -21.43,
    latitude > -21.48,
    longitude > 114.96,
    longitude < 115.05,
    date > dmy("17/11/2016"))

#' O Lord of Darkness, accept this our functional sacrifice of three days and three nights
#' From a list of unnamed lists, or the data.frame equivalent, extract a field or -1
extract_possibly <- possibly(extract, otherwise = -1)
get_f <- function(lol, field) lol %>% unlist %>% extract_possibly(field) %>% unlist %>% as.numeric

# Flatten nested JSON, parse field formats and rename columns
tracks <- track_records$content %>%
  mutate(
    datetime = properties.when %>% utc_as_gmt08,
    longitude = properties.longitude %>% as.numeric,
    latitude = properties.latitude %>% as.numeric,
    date = properties.when %>% as_turtle_date,
    species = properties.species,
    nest_age = properties.nest_age,
    nest_type = properties.nest_type,
    obs = properties.observation_set,
    hatching_success =  obs %>% map(get_f, "hatching_success") %>% as.numeric,
    emergence_success = obs %>% map(get_f, "emergence_success") %>% as.numeric,
    clutch_size = obs %>% map(get_f, "egg_count_calculated") %>% as.numeric
  ) %>% thv_filter
save(tracks, file = "data/tracks.Rda")
load("data/tracks.Rda")

tags <- tag_records$content %>%
  mutate(
    datetime = properties.when %>% utc_as_gmt08,
    longitude = properties.longitude %>% as.numeric,
    latitude = properties.latitude %>% as.numeric,
    date = properties.when %>% as_turtle_date,
    species = properties.species,
    health = properties.health,
    nesting = properties.nesting_event,
    name=properties.name
  ) %>% thv_filter
save(tags, file = "data/tags.Rda")
load("data/tags.Rda")

# Hold my beer, we'll do it in JSON
nests <- nest_json$content %>% {
  tibble::tibble(
    datetime = map_chr(., c("properties", "when")) %>% utc_as_gmt08,
    longitude = map_dbl(., c("properties", "longitude")),
    latitude = map_dbl(., c("properties", "latitude")),
    date = map_chr(., c("properties", "when")) %>% as_turtle_date,
    species = map_chr(., c("properties", "species")),
    obs = map(., c("properties", "observation_set")),
    hatching_success = obs %>% map(get_f, "hatching_success") %>% as.numeric,
    emergence_success = obs %>% map(get_f, "emergence_success") %>% as.numeric,
    clutch_size = obs %>% map(get_f, "egg_count_calculated") %>% as.numeric
    )
} %>% thv_filter
save(nests, file = "data/nests.Rda")
load("data/nests.Rda")

# unique(nests$hatching_success)
# listviewer::jsonedit(nests)
```

First Slide
========================================================

For more details on authoring R presentations please visit <https://support.rstudio.com/hc/en-us/articles/200486468>.

- Bullet 1
- Bullet 2
- Bullet 3

Slide With Code
========================================================

```{r}
summary(cars)
```

Slide With Plot
========================================================

```{r, echo=FALSE}
plot(cars)
```

Slide With Map
========================================================

```{r map}
#' makeAwesomeIcon factory
mkicon <- function(ico, col) makeAwesomeIcon(icon = ico, markerColor = col)

trackIcons <- awesomeIconList(
  "cheloniidae-fam" = mkicon('align-center', 'black'),
  "chelonia-mydas" = mkicon('align-center', 'green'),
  "eretmochelys-imbricata" = mkicon('align-center', 'blue'),
  "natator-depressus" = mkicon('align-center', 'red')
  )

tagIcons <- awesomeIconList(
  "cheloniidae-fam" = mkicon('tag', 'black'),
  "chelonia-mydas" = mkicon('tag', 'green'),
  "eretmochelys-imbricata" = mkicon('tag', 'blue'),
  "natator-depressus" = mkicon('tag', 'red')
  )

nestIcons <- awesomeIconList(
  "cheloniidae-fam" = mkicon('baby-formula', 'black'),
  "chelonia-mydas" = mkicon('baby-formula', 'green'),
  "eretmochelys-imbricata" = mkicon('baby-formula', 'blue'),
  "natator-depressus" = mkicon('baby-formula', 'red')
  )

leaflet(tracks) %>%
  addProviderTiles("Esri.WorldImagery", group = "Aerial") %>%
  addProviderTiles("OpenStreetMap.Mapnik", group = "Place names") %>%
  setView(lng=115.0, lat=-21.45, zoom=12) %>%
  addPolygons(data = grd, weight = 1, color = "orange", opacity = 0.5,
              label = ~paste(id), group = "Grid") %>%
  addPolygons(data = tagging_area, weight = 1, color = "blue", opacity = 0.5,
              group = "Tagging area") %>%
  addAwesomeMarkers(~longitude, ~latitude,
                    data = filter(tracks, nest_type != "hatched-nest"),
                    # data=tracks,
                    icon = ~trackIcons[species],
                    label = ~paste("Track", date, nest_age, species, nest_type),
                    popup = ~paste("Track", date, nest_age, species, nest_type),
                    group = "Tracks") %>%
  addAwesomeMarkers(~longitude, ~latitude, data = tags,
                    icon = ~tagIcons[species],
                    label = ~paste("Tag", date, species, name, "nesting:", nesting),
                    popup = ~paste("Tag", date, species, name, "nesting:", nesting),
                    group = "Tags") %>%
  # addHeatmap(data=tags, lng = ~longitude, lat = ~latitude,
  #            blur = 20, max = 1, radius = 15) %>%
  addAwesomeMarkers(~longitude, ~latitude,
                    data = nests,
                    icon = ~nestIcons[species],
                    label = ~paste("Nest", date, species,
                                   "HS", as.numeric(hatching_success),
                                   "%, ES", as.numeric(emergence_success), "%"),
                    popup = ~paste("Nest", date, species,
                                   "HS", as.numeric(hatching_success),
                                   "%, ES", as.numeric(emergence_success), "%"),
                    group = "Nests") %>%
  addLayersControl(baseGroups = c("Aerial", "Place names"),
                   overlayGroups = c("Grid", "Tagging area", "Tracks", "Tags", "Nests"))
```


How many turtles and tags were processed per day?
========================================================

```{r, echo=F}
tags_by_date <- tags %>% group_by(date) %>% tally() %>% ungroup()
animals_by_date <- tags %>% group_by(date, name) %>% tally() %>% ungroup()
```

A total of `r nrow(tags)` turtles were processed (captured new or resighted)
during the `r length(unique(tags_by_date$date))` days of field work on which
tagging took place.

This number excludes records in WAMTRAM with missing coordinates or time stamps.
Re-sightings of the same turtle are counted as separate handling events.

On average, `r mean(tags_by_date$n) %>% round(digits = 2)`
(SD `r sd(tags_by_date$n) %>% round(digits = 2)`,
range `r min(tags_by_date$n)` to `r max(tags_by_date$n)`) turtles were processed
per surveyed day.

`r length(unique(animals_by_date$name))` distinct tags were applied.
This number relates to new animals, but contains the tag "NA" and resightings.
This number also omits the invalid records from WAMTRAM with missing coordinates
or dates.

How many turtles and tags were processed per day (2)
========================================================

```{r fig_turtles_processed_per_day, echo=F}
ggplot(tags_by_date, aes(x = date, y = n)) +
  geom_bar(stat = "identity") +
  scale_x_date(breaks = scales::pretty_breaks(),
               labels = scales::date_format("%d %b %Y")) +
  labs(x="Date", y ="Number of turtles processed") +
  ggtitle("Turtles processed per day (new and recaptured)") +
  theme_light() +
  ggsave(paste0("data/turtles_processed_per_day.pdf"), width = 7, height = 5)
```
